{
  "provider": {
    "type": "gemini"
  },
  "commit": {
    "commitLanguage": "english",
    "commitFormat": "conventional",
    "useCustomInstructions": true,
    "customInstructions": "Para mensagens de commit, siga estritamente o formato Conventional Commits estritamente para mensagens de commit sempre em Ingl√™s. Use essa estrutura exata:\n\n```<tipo>[escopo opcional]: <gitmoji> <descri√ß√£o>\n\n[corpo opcional]\n```\n\nExemplos:\n- `feat(auth): :sparkles: adicionar valida√ß√£o de login nova`\n- `fix(api): üêõ resolver o tempo limite de busca de dados do usu√°rio`\n- `docs: :memo: atualizar passos de instala√ß√£o no README`\n- `docs: :bookmark: adicionar coment√°rios JSDoc √† componente de m√≠dia`\n- `style: :art: formatar c√≥digo de acordo com as regras de formata√ß√£o`\n- `refactor: :recycle: reorganizar l√≥gica de detec√ß√£o de plataforma de v√≠deo`\n\nOs tipos devem ser um dos seguintes:\n- `feat`: para novas funcionalidades ou recursos\n- `fix`: para corre√ß√£o de bugs\n- `docs`: altera√ß√µes na documenta√ß√£o, incluindo altera√ß√µes de arquivos Markdown, documenta√ß√£o de c√≥digo e coment√°rios JSDoc\n- `style`: altera√ß√µes que n√£o afetam a funcionalidade do c√≥digo, como formata√ß√£o, espa√ßos em branco e etc.\n- `refactor`: altera√ß√µes na estrutura do c√≥digo que n√£o corrigem bugs e n√£o adicionam novas funcionalidades\n- `perf`: altera√ß√µes que melhoram a performance\n- `test`: adi√ß√£o ou corre√ß√£o de testes\n- `build`: altera√ß√µes que afetam o sistema de compila√ß√£o, novas depend√™ncias ou novas vers√µes\n- `ci`: altera√ß√µes na configura√ß√£o do CI, como GitHub Actions, Jenkins e etc.\n- `chore`: outras altera√ß√µes que n√£o modificam c√≥digo, testes, documenta√ß√µes e etc.\n- `revert`: revers√£o de um commit\n\nIMPORTANTE:\n- Sempre inclua um c√≥digo gitmoji relevante no in√≠cio da descri√ß√£o. Associe o gitmoji adequado ao tipo de altera√ß√£o.\n- Use `docs` (com :bulb: ou :memo:) para adi√ß√µes ou altera√ß√µes JSDoc, n√£o `refactor`.\n- Limite o t√≠tulo da mensagem (linha inicial) a no m√°ximo **72 caracteres**.\n- Sempre separe o t√≠tulo do corpo com uma linha em branco.\n- Quando houver altera√ß√µes incompat√≠veis (breaking changes), use `BREAKING CHANGE` no corpo do commit, e **n√£o no t√≠tulo**.\n\nPara o corpo:\n- Use pontos (`*`) para m√∫ltiplos itens\n- Explique sempre de forma sucinta POR QUE a altera√ß√£o foi necess√°ria\n- Inclua, de forma concisa, o contexto relevante ou detalhes t√©cnicos\n- O corpo deve ser separado do t√≠tulo por uma linha em branco\n\nExemplo completo:\nrefactor(api): ‚ôªÔ∏è ajustar endpoint de autentica√ß√£o\n\n- Remove suporte a autentica√ß√£o via token no header x-auth\n- Adiciona suporte obrigat√≥rio a Bearer Token no Authorization header\n- BREAKING CHANGE: endpoints de autentica√ß√£o agora exigem Bearer Token\n\nCertifique-se de que a mensagem seja sucinta, profissional e comunique claramente o prop√≥sito do commit.",
    "onlyStagedChanges": true,
    "autoCommit": false,
    "autoPush": false,
    "promptForRefs": false
  },
  "gemini": {
    "model": "gemini-1.5-flash"
  },
  "telemetry": {
    "enabled": false
  }
}
